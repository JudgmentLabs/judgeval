# generated by datamodel-codegen:
#   filename:  openapi_new.json
#   timestamp: 2025-07-04T02:51:26+00:00

from __future__ import annotations

from typing import Annotated, Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field


class EvalResultsFetchByProjectSortedLimitJudgmentType(BaseModel):
    project_name: Annotated[str, Field(title="Project Name")]
    limit: Annotated[int, Field(title="Limit")]


class DatasetDeleteExamplesJudgmentType(BaseModel):
    dataset_alias: Annotated[str, Field(title="Dataset Alias")]
    example_ids: Annotated[List[str], Field(title="Example Ids")]


class DatasetFetchJudgmentType(BaseModel):
    dataset_alias: Annotated[str, Field(title="Dataset Alias")]
    project_name: Annotated[str, Field(title="Project Name")]


class DatasetFetchByProjectJudgmentType(BaseModel):
    project_name: Annotated[str, Field(title="Project Name")]


class DatasetDeleteJudgmentType(BaseModel):
    dataset_alias: Annotated[str, Field(title="Dataset Alias")]
    project_name: Annotated[str, Field(title="Project Name")]


class TraceFetchJudgmentType(BaseModel):
    trace_id: Annotated[str, Field(title="Trace Id")]


class BatchTraceFetchJudgmentType(BaseModel):
    trace_ids: Annotated[List[str], Field(title="Trace Ids")]


class TracesFetchByProjectJudgmentType(BaseModel):
    project_name: Annotated[str, Field(title="Project Name")]


class TraceDeleteBatchJudgmentType(BaseModel):
    trace_ids: Annotated[List[str], Field(title="Trace Ids")]


class FetchClassifierScorersRequestJudgmentType(BaseModel):
    user_filter: Annotated[Optional[bool], Field(title="User Filter")] = False


class ScorerConfigJudgmentType(BaseModel):
    score_type: Annotated[str, Field(title="Score Type")]
    name: Annotated[Optional[str], Field(title="Name")] = None
    threshold: Annotated[Optional[float], Field(title="Threshold")] = 0.5
    strict_mode: Annotated[Optional[bool], Field(title="Strict Mode")] = False
    required_params: Annotated[Optional[List[str]], Field(title="Required Params")] = []
    kwargs: Annotated[Optional[Dict[str, Any]], Field(title="Kwargs")] = None


class ValidationErrorJudgmentType(BaseModel):
    loc: Annotated[List[Union[str, int]], Field(title="Location")]
    msg: Annotated[str, Field(title="Message")]
    type: Annotated[str, Field(title="Error Type")]


class MessageItemJudgmentType(BaseModel):
    role: Annotated[str, Field(title="Role")]
    content: Annotated[str, Field(title="Content")]


class ToolJudgmentType(BaseModel):
    tool_name: Annotated[str, Field(title="Tool Name")]
    parameters: Annotated[Optional[Dict[str, Any]], Field(title="Parameters")] = None
    agent_name: Annotated[Optional[str], Field(title="Agent Name")] = None
    result_dependencies: Annotated[
        Optional[List[Dict[str, Any]]], Field(title="Result Dependencies")
    ] = None
    action_dependencies: Annotated[
        Optional[List[Dict[str, Any]]], Field(title="Action Dependencies")
    ] = None
    require_all: Annotated[Optional[bool], Field(title="Require All")] = None


class ScorerDataJudgmentType(BaseModel):
    name: Annotated[str, Field(title="Name")]
    threshold: Annotated[float, Field(title="Threshold")]
    success: Annotated[bool, Field(title="Success")]
    score: Annotated[Optional[float], Field(title="Score")] = None
    reason: Annotated[Optional[str], Field(title="Reason")] = None
    strict_mode: Annotated[Optional[bool], Field(title="Strict Mode")] = None
    evaluation_model: Annotated[
        Optional[Union[List[str], str]], Field(title="Evaluation Model")
    ] = None
    error: Annotated[Optional[str], Field(title="Error")] = None
    evaluation_cost: Annotated[Optional[float], Field(title="Evaluation Cost")] = None
    verbose_logs: Annotated[Optional[str], Field(title="Verbose Logs")] = None
    additional_metadata: Annotated[
        Optional[Dict[str, Any]], Field(title="Additional Metadata")
    ] = None


class CustomExampleJudgmentType(BaseModel):
    input: Annotated[Optional[Dict[str, Any]], Field(title="Input")] = None
    actual_output: Annotated[Optional[Dict[str, Any]], Field(title="Actual Output")] = (
        None
    )
    expected_output: Annotated[
        Optional[Dict[str, Any]], Field(title="Expected Output")
    ] = None
    context: Annotated[Optional[List[str]], Field(title="Context")] = None
    retrieval_context: Annotated[
        Optional[List[str]], Field(title="Retrieval Context")
    ] = None
    additional_metadata: Annotated[
        Optional[Dict[str, Any]], Field(title="Additional Metadata")
    ] = None
    tools_called: Annotated[Optional[List[str]], Field(title="Tools Called")] = None
    expected_tools: Annotated[Optional[List[str]], Field(title="Expected Tools")] = None
    name: Annotated[Optional[str], Field(title="Name")] = None
    example_id: Annotated[Optional[str], Field(title="Example Id")] = None
    example_index: Annotated[Optional[int], Field(title="Example Index")] = None
    timestamp: Annotated[Optional[str], Field(title="Timestamp")] = None
    trace_id: Annotated[Optional[str], Field(title="Trace Id")] = None


class TraceUsageJudgmentType(BaseModel):
    prompt_tokens: Annotated[Optional[int], Field(title="Prompt Tokens")] = None
    completion_tokens: Annotated[Optional[int], Field(title="Completion Tokens")] = None
    total_tokens: Annotated[Optional[int], Field(title="Total Tokens")] = None
    prompt_tokens_cost_usd: Annotated[
        Optional[float], Field(title="Prompt Tokens Cost Usd")
    ] = None
    completion_tokens_cost_usd: Annotated[
        Optional[float], Field(title="Completion Tokens Cost Usd")
    ] = None
    total_cost_usd: Annotated[Optional[float], Field(title="Total Cost Usd")] = None
    model_name: Annotated[Optional[str], Field(title="Model Name")] = None


class HTTPValidationErrorJudgmentType(BaseModel):
    detail: Annotated[
        Optional[List[ValidationErrorJudgmentType]], Field(title="Detail")
    ] = None


class ClassifierScorerRequestJudgmentType(BaseModel):
    name: Annotated[str, Field(title="Name")]
    conversation: Annotated[
        List[MessageItemJudgmentType], Field(min_items=1, title="Conversation")
    ]
    options: Annotated[Dict[str, float], Field(title="Options")]
    slug: Annotated[Optional[str], Field(title="Slug")] = None


class ExampleJudgmentType(BaseModel):
    input: Annotated[Optional[Union[str, Dict[str, Any]]], Field(title="Input")] = None
    actual_output: Annotated[
        Optional[Union[str, List[str]]], Field(title="Actual Output")
    ] = None
    expected_output: Annotated[
        Optional[Union[str, List[str]]], Field(title="Expected Output")
    ] = None
    context: Annotated[Optional[List[str]], Field(title="Context")] = None
    retrieval_context: Annotated[
        Optional[List[str]], Field(title="Retrieval Context")
    ] = None
    additional_metadata: Annotated[
        Optional[Dict[str, Any]], Field(title="Additional Metadata")
    ] = None
    tools_called: Annotated[Optional[List[str]], Field(title="Tools Called")] = []
    expected_tools: Annotated[
        Optional[List[ToolJudgmentType]], Field(title="Expected Tools")
    ] = []
    name: Annotated[Optional[str], Field(title="Name")] = None
    example_id: Annotated[str, Field(title="Example Id")]
    example_index: Annotated[Optional[int], Field(title="Example Index")] = None
    created_at: Annotated[Optional[str], Field(title="Created At")] = None
    trace_id: Annotated[Optional[str], Field(title="Trace Id")] = None
    trace_span_id: Annotated[Optional[str], Field(title="Trace Span Id")] = None
    dataset_id: Annotated[Optional[str], Field(title="Dataset Id")] = None


class TraceSpanJudgmentType(BaseModel):
    span_id: Annotated[str, Field(title="Span Id")]
    trace_id: Annotated[str, Field(title="Trace Id")]
    function: Annotated[str, Field(title="Function")]
    depth: Annotated[int, Field(title="Depth")]
    created_at: Annotated[Any, Field(title="Created At")] = None
    parent_span_id: Annotated[Optional[str], Field(title="Parent Span Id")] = None
    span_type: Annotated[Optional[str], Field(title="Span Type")] = "span"
    inputs: Annotated[Optional[Dict[str, Any]], Field(title="Inputs")] = None
    error: Annotated[Optional[Dict[str, Any]], Field(title="Error")] = None
    output: Annotated[Any, Field(title="Output")] = None
    usage: Optional[TraceUsageJudgmentType] = None
    duration: Annotated[Optional[float], Field(title="Duration")] = None
    annotation: Annotated[Optional[List[Dict[str, Any]]], Field(title="Annotation")] = (
        None
    )
    expected_tools: Annotated[
        Optional[List[ToolJudgmentType]], Field(title="Expected Tools")
    ] = None
    additional_metadata: Annotated[
        Optional[Dict[str, Any]], Field(title="Additional Metadata")
    ] = None
    has_evaluation: Annotated[Optional[bool], Field(title="Has Evaluation")] = False
    agent_name: Annotated[Optional[str], Field(title="Agent Name")] = None
    state_before: Annotated[Optional[Dict[str, Any]], Field(title="State Before")] = (
        None
    )
    state_after: Annotated[Optional[Dict[str, Any]], Field(title="State After")] = None


class JudgmentEvalJudgmentType(BaseModel):
    project_name: Annotated[Optional[str], Field(title="Project Name")] = None
    eval_name: Annotated[Optional[str], Field(title="Eval Name")] = None
    examples: Annotated[List[ExampleJudgmentType], Field(title="Examples")]
    scorers: Annotated[List[ScorerConfigJudgmentType], Field(title="Scorers")]
    model: Annotated[str, Field(title="Model")]
    judgment_api_key: Annotated[Optional[str], Field(title="Judgment Api Key")] = None
    append: Annotated[Optional[bool], Field(title="Append")] = False
    override_existing_eval_run_name: Annotated[
        Optional[bool], Field(title="Override Existing Eval Run Name")
    ] = False
    trace_span_id: Annotated[Optional[str], Field(title="Trace Span Id")] = None


class DatasetInsertExamplesJudgmentType(BaseModel):
    dataset_alias: Annotated[str, Field(title="Dataset Alias")]
    examples: Annotated[List[ExampleJudgmentType], Field(title="Examples")]
    project_name: Annotated[str, Field(title="Project Name")]


class TraceSaveJudgmentType(BaseModel):
    trace_id: Annotated[str, Field(title="Trace Id")]
    name: Annotated[str, Field(title="Name")]
    created_at: Annotated[str, Field(title="Created At")]
    duration: Annotated[float, Field(title="Duration")]
    trace_spans: Annotated[List[TraceSpanJudgmentType], Field(title="Trace Spans")]
    overwrite: Annotated[Optional[bool], Field(title="Overwrite")] = False
    offline_mode: Annotated[Optional[bool], Field(title="Offline Mode")] = False
    rules: Annotated[Optional[Dict[str, Any]], Field(title="Rules")] = None
    has_notification: Annotated[Optional[bool], Field(title="Has Notification")] = False
    customer_id: Annotated[Optional[str], Field(title="Customer Id")] = None
    tags: Annotated[Optional[List[str]], Field(title="Tags")] = None
    metadata: Annotated[Optional[Dict[str, Any]], Field(title="Metadata")] = None
    project_name: Annotated[str, Field(title="Project Name")]
    evaluation_runs: Annotated[
        List[JudgmentEvalJudgmentType], Field(title="Evaluation Runs")
    ]


class TraceJudgmentType(BaseModel):
    trace_id: Annotated[str, Field(title="Trace Id")]
    name: Annotated[str, Field(title="Name")]
    created_at: Annotated[str, Field(title="Created At")]
    duration: Annotated[float, Field(title="Duration")]
    trace_spans: Annotated[List[TraceSpanJudgmentType], Field(title="Trace Spans")]
    overwrite: Annotated[Optional[bool], Field(title="Overwrite")] = False
    offline_mode: Annotated[Optional[bool], Field(title="Offline Mode")] = False
    rules: Annotated[Optional[Dict[str, Any]], Field(title="Rules")] = {}
    has_notification: Annotated[Optional[bool], Field(title="Has Notification")] = False
    customer_id: Annotated[Optional[str], Field(title="Customer Id")] = None
    tags: Annotated[Optional[List[str]], Field(title="Tags")] = []
    metadata: Annotated[Optional[Dict[str, Any]], Field(title="Metadata")] = {}


class ScoringResultJudgmentType(BaseModel):
    success: Annotated[bool, Field(title="Success")]
    scorers_data: Annotated[
        Optional[List[ScorerDataJudgmentType]], Field(title="Scorers Data")
    ]
    name: Annotated[Optional[str], Field(title="Name")] = None
    data_object: Annotated[
        Optional[
            Union[TraceSpanJudgmentType, CustomExampleJudgmentType, ExampleJudgmentType]
        ],
        Field(title="Data Object"),
    ] = None
    trace_id: Annotated[Optional[str], Field(title="Trace Id")] = None
    run_duration: Annotated[Optional[float], Field(title="Run Duration")] = None
    evaluation_cost: Annotated[Optional[float], Field(title="Evaluation Cost")] = None


class TraceRunJudgmentType(BaseModel):
    project_name: Annotated[Optional[str], Field(title="Project Name")] = None
    eval_name: Annotated[Optional[str], Field(title="Eval Name")] = None
    traces: Annotated[List[TraceJudgmentType], Field(title="Traces")]
    scorers: Annotated[List[ScorerConfigJudgmentType], Field(title="Scorers")]
    model: Annotated[str, Field(title="Model")]
    judgment_api_key: Annotated[Optional[str], Field(title="Judgment Api Key")] = None
    append: Annotated[Optional[bool], Field(title="Append")] = False
    override_existing_eval_run_name: Annotated[
        Optional[bool], Field(title="Override Existing Eval Run Name")
    ] = False
    trace_span_id: Annotated[Optional[str], Field(title="Trace Span Id")] = None
    tools: Annotated[Optional[List[Dict[str, Any]]], Field(title="Tools")] = None


class EvalResultsJudgmentType(BaseModel):
    results: Annotated[List[ScoringResultJudgmentType], Field(title="Results")]
    run: Annotated[
        Union[TraceRunJudgmentType, JudgmentEvalJudgmentType], Field(title="Run")
    ]


class DatasetPushJudgmentType(BaseModel):
    dataset_alias: Annotated[str, Field(title="Dataset Alias")]
    comments: Annotated[Optional[str], Field(title="Comments")] = None
    source_file: Annotated[Optional[str], Field(title="Source File")] = None
    examples: Annotated[
        Optional[List[ExampleJudgmentType]], Field(title="Examples")
    ] = None
    traces: Annotated[Optional[List[TraceJudgmentType]], Field(title="Traces")] = None
    is_trace: Annotated[Optional[bool], Field(title="Is Trace")] = False
    project_name: Annotated[str, Field(title="Project Name")]
    overwrite: Annotated[Optional[bool], Field(title="Overwrite")] = False
