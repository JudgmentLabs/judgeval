# generated by datamodel-codegen:
#   filename:  openapi-judgeval.json
#   timestamp: 2025-06-22T02:59:20+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field, RootModel, conint


class EvalResultsFetch(BaseModel):
    eval_name: str = Field(..., title="Eval Name")
    project_name: str = Field(..., title="Project Name")


class EvalResultsDelete(BaseModel):
    eval_names: List[str] = Field(..., title="Eval Names")
    project_name: str = Field(..., title="Project Name")


class EvalResultsDeleteByProject(BaseModel):
    project_name: str = Field(..., title="Project Name")


class DatasetFetch(BaseModel):
    dataset_alias: str = Field(..., title="Dataset Alias")
    project_name: str = Field(..., title="Project Name")


class DatasetFetchStatsByProject(BaseModel):
    project_name: str = Field(..., title="Project Name")


class DatasetDelete(BaseModel):
    dataset_alias: str = Field(..., title="Dataset Alias")
    project_name: str = Field(..., title="Project Name")


class TraceFetch(BaseModel):
    trace_id: str = Field(..., title="Trace Id")


class TraceDeleteBatch(BaseModel):
    trace_ids: List[str] = Field(..., title="Trace Ids")


class TraceUsageUpdateRequest(BaseModel):
    count: Optional[conint(ge=1)] = Field( # type: ignore
        1, description="Number of traces to count", title="Count"
    )
    trace_ids: Optional[List[str]] = Field(
        None, description="Optional list of trace IDs for tracking", title="Trace Ids"
    )


class EvaluationRunsBatchRequest(BaseModel):
    organization_id: str = Field(..., title="Organization Id")
    evaluation_entries: List[Dict[str, Any]] = Field(..., title="Evaluation Entries")


class ProjectAdd(BaseModel):
    project_name: str = Field(..., title="Project Name")


class ProjectAddResponse(BaseModel):
    project_id: str = Field(..., title="Project Id")


class ProjectDelete(BaseModel):
    project_name: str = Field(..., title="Project Name")


class ProjectDeleteResponse(BaseModel):
    message: str = Field(..., title="Message")


class Scorer(BaseModel):
    threshold: float = Field(..., title="Threshold")
    score_type: str = Field(..., title="Score Type")
    kwargs: Optional[Dict[str, Any]] = Field(None, title="Kwargs")


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title="Location")
    msg: str = Field(..., title="Message")
    type: str = Field(..., title="Error Type")


class SpanBatchItem(BaseModel):
    span_id: str = Field(..., title="Span Id")
    trace_id: str = Field(..., title="Trace Id")
    function: str = Field(..., title="Function")
    depth: int = Field(..., title="Depth")
    created_at: Any = Field(None, title="Created At")
    parent_span_id: Optional[str] = Field(None, title="Parent Span Id")
    span_type: Optional[str] = Field("span", title="Span Type")
    inputs: Optional[Dict[str, Any]] = Field(None, title="Inputs")
    output: Any = Field(None, title="Output")
    error: Optional[Dict[str, Any]] = Field(None, title="Error")
    usage: Optional[Dict[str, Any]] = Field(None, title="Usage")
    duration: Optional[float] = Field(None, title="Duration")
    annotation: Optional[List[Dict[str, Any]]] = Field(None, title="Annotation")
    expected_tools: Optional[List[Dict[str, Any]]] = Field(None, title="Expected Tools")
    additional_metadata: Optional[Dict[str, Any]] = Field(
        None, title="Additional Metadata"
    )
    has_evaluation: Optional[bool] = Field(False, title="Has Evaluation")
    agent_name: Optional[str] = Field(None, title="Agent Name")
    state_before: Optional[Dict[str, Any]] = Field(None, title="State Before")
    state_after: Optional[Dict[str, Any]] = Field(None, title="State After")
    span_state: str = Field(..., title="Span State")
    queued_at: float = Field(..., title="Queued At")


class Tool(BaseModel):
    tool_name: str = Field(..., title="Tool Name")
    parameters: Optional[Dict[str, Any]] = Field(None, title="Parameters")
    agent_name: Optional[str] = Field(None, title="Agent Name")
    result_dependencies: Optional[List[Dict[str, Any]]] = Field(
        None, title="Result Dependencies"
    )
    action_dependencies: Optional[List[Dict[str, Any]]] = Field(
        None, title="Action Dependencies"
    )
    require_all: Optional[bool] = Field(None, title="Require All")


class ScorerData(BaseModel):
    name: str = Field(..., title="Name")
    threshold: float = Field(..., title="Threshold")
    success: bool = Field(..., title="Success")
    score: Optional[float] = Field(None, title="Score")
    reason: Optional[str] = Field(None, title="Reason")
    strict_mode: Optional[bool] = Field(None, title="Strict Mode")
    evaluation_model: Optional[Union[str, List[str]]] = Field(
        None, title="Evaluation Model"
    )
    error: Optional[str] = Field(None, title="Error")
    evaluation_cost: Optional[float] = Field(None, title="Evaluation Cost")
    verbose_logs: Optional[str] = Field(None, title="Verbose Logs")
    additional_metadata: Optional[Dict[str, Any]] = Field(
        None, title="Additional Metadata"
    )


class CustomExample(RootModel[Any]):
    root: Any


class TraceUsage(RootModel[Any]):
    root: Any


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title="Detail")


class SpansBatchRequest(BaseModel):
    spans: List[SpanBatchItem] = Field(..., title="Spans")
    organization_id: str = Field(..., title="Organization Id")


class Example(BaseModel):
    example_id: str = Field(..., title="Example Id")
    input: Optional[Union[str, Dict[str, Any]]] = Field(None, title="Input")
    actual_output: Optional[Union[str, List[str]]] = Field(None, title="Actual Output")
    expected_output: Optional[Union[str, List[str]]] = Field(
        None, title="Expected Output"
    )
    context: Optional[List[str]] = Field(None, title="Context")
    retrieval_context: Optional[List[str]] = Field(None, title="Retrieval Context")
    additional_metadata: Optional[Dict[str, Any]] = Field(
        None, title="Additional Metadata"
    )
    tools_called: Optional[List[str]] = Field([], title="Tools Called")
    expected_tools: Optional[List[Tool]] = Field([], title="Expected Tools")
    name: Optional[str] = Field(None, title="Name")
    created_at: Optional[str] = Field(None, title="Created At")
    dataset_id: Optional[str] = Field(None, title="Dataset Id")
    trace_span_id: Optional[str] = Field(None, title="Trace Span Id")


class TraceSpan(BaseModel):
    span_id: str = Field(..., title="Span Id")
    trace_id: str = Field(..., title="Trace Id")
    function: str = Field(..., title="Function")
    depth: int = Field(..., title="Depth")
    created_at: Any = Field(None, title="Created At")
    parent_span_id: Optional[str] = Field(None, title="Parent Span Id")
    span_type: Optional[str] = Field("span", title="Span Type")
    inputs: Optional[Dict[str, Any]] = Field(None, title="Inputs")
    output: Any = Field(None, title="Output")
    error: Optional[Dict[str, Any]] = Field(None, title="Error")
    usage: Optional[TraceUsage] = None
    duration: Optional[float] = Field(None, title="Duration")
    annotation: Optional[List[Dict[str, Any]]] = Field(None, title="Annotation")
    expected_tools: Optional[List[Tool]] = Field(None, title="Expected Tools")
    additional_metadata: Optional[Dict[str, Any]] = Field(
        None, title="Additional Metadata"
    )
    has_evaluation: Optional[bool] = Field(False, title="Has Evaluation")
    agent_name: Optional[str] = Field(None, title="Agent Name")
    state_before: Optional[Dict[str, Any]] = Field(None, title="State Before")
    state_after: Optional[Dict[str, Any]] = Field(None, title="State After")


class JudgmentEval(BaseModel):
    project_name: Optional[str] = Field(None, title="Project Name")
    eval_name: Optional[str] = Field(None, title="Eval Name")
    examples: List[Example] = Field(..., title="Examples")
    scorers: List[Scorer] = Field(..., title="Scorers")
    model: Union[str, List[str]] = Field(..., title="Model")
    aggregator: Optional[str] = Field(None, title="Aggregator")
    metadata: Optional[Dict[str, Any]] = Field({}, title="Metadata")
    judgment_api_key: Optional[str] = Field(None, title="Judgment Api Key")
    log_results: bool = Field(..., title="Log Results")
    append: Optional[bool] = Field(False, title="Append")
    override_existing_eval_run_name: Optional[bool] = Field(
        False, title="Override Existing Eval Run Name"
    )
    rules: Optional[List] = Field(None, title="Rules")
    trace_span_id: Optional[str] = Field(None, title="Trace Span Id")


class DatasetInsertExamples(BaseModel):
    dataset_alias: str = Field(..., title="Dataset Alias")
    examples: List[Example] = Field(..., title="Examples")
    project_name: str = Field(..., title="Project Name")


class TraceSave(BaseModel):
    trace_id: str = Field(..., title="Trace Id")
    name: str = Field(..., title="Name")
    created_at: str = Field(..., title="Created At")
    duration: float = Field(..., title="Duration")
    trace_spans: List[TraceSpan] = Field(..., title="Trace Spans")
    overwrite: Optional[bool] = Field(False, title="Overwrite")
    offline_mode: Optional[bool] = Field(False, title="Offline Mode")
    rules: Optional[Dict[str, Any]] = Field(None, title="Rules")
    has_notification: Optional[bool] = Field(False, title="Has Notification")
    customer_id: Optional[str] = Field(None, title="Customer Id")
    tags: Optional[List[str]] = Field(None, title="Tags")
    project_name: str = Field(..., title="Project Name")
    evaluation_runs: List[JudgmentEval] = Field(..., title="Evaluation Runs")


class Trace(BaseModel):
    trace_id: str = Field(..., title="Trace Id")
    name: str = Field(..., title="Name")
    created_at: str = Field(..., title="Created At")
    duration: float = Field(..., title="Duration")
    trace_spans: List[TraceSpan] = Field(..., title="Trace Spans")
    overwrite: Optional[bool] = Field(False, title="Overwrite")
    offline_mode: Optional[bool] = Field(False, title="Offline Mode")
    rules: Optional[Dict[str, Any]] = Field(None, title="Rules")
    has_notification: Optional[bool] = Field(False, title="Has Notification")
    customer_id: Optional[str] = Field(None, title="Customer Id")
    tags: Optional[List[str]] = Field(None, title="Tags")


class ScoringResult(BaseModel):
    success: bool = Field(..., title="Success")
    scorers_data: Optional[List[ScorerData]] = Field(..., title="Scorers Data")
    name: Optional[str] = Field(None, title="Name")
    data_object: Optional[Union[TraceSpan, CustomExample, Example]] = Field(
        None, title="Data Object"
    )
    trace_id: Optional[str] = Field(None, title="Trace Id")
    run_duration: Optional[float] = Field(None, title="Run Duration")
    evaluation_cost: Optional[float] = Field(None, title="Evaluation Cost")


class TraceRun(BaseModel):
    project_name: Optional[str] = Field(None, title="Project Name")
    eval_name: Optional[str] = Field(None, title="Eval Name")
    traces: List[Trace] = Field(..., title="Traces")
    scorers: List[Scorer] = Field(..., title="Scorers")
    model: Union[str, List[str]] = Field(..., title="Model")
    aggregator: Optional[str] = Field(None, title="Aggregator")
    metadata: Optional[Dict[str, Any]] = Field({}, title="Metadata")
    judgment_api_key: Optional[str] = Field(None, title="Judgment Api Key")
    log_results: bool = Field(..., title="Log Results")
    append: Optional[bool] = Field(False, title="Append")
    override_existing_eval_run_name: Optional[bool] = Field(
        False, title="Override Existing Eval Run Name"
    )
    rules: Optional[List] = Field(None, title="Rules")
    trace_span_id: Optional[str] = Field(None, title="Trace Span Id")
    tools: Optional[List[Dict[str, Any]]] = Field(None, title="Tools")


class EvalResults(BaseModel):
    results: List[ScoringResult] = Field(..., title="Results")
    run: Union[TraceRun, JudgmentEval] = Field(..., title="Run")


class DatasetPush(BaseModel):
    dataset_alias: str = Field(..., title="Dataset Alias")
    comments: Optional[str] = Field(None, title="Comments")
    source_file: Optional[str] = Field(None, title="Source File")
    examples: Optional[List[Example]] = Field(None, title="Examples")
    traces: Optional[List[Trace]] = Field(None, title="Traces")
    is_trace: Optional[bool] = Field(False, title="Is Trace")
    project_name: str = Field(..., title="Project Name")
    overwrite: Optional[bool] = Field(False, title="Overwrite")
