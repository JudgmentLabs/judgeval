name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

permissions: read-all

jobs:
  check-if-should-run:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
    steps:
      - name: Check if workflow should run
        id: check
        run: |
          if [[ "${{ github.event.action }}" == "edited" ]]; then
            echo "PR was edited - checking if base branch changed"
            # Check if base branch was changed
            if [[ "${{ github.event.changes.base.ref.from }}" != "" && "${{ github.event.changes.base.ref.from }}" != "${{ github.event.changes.base.ref.to }}" ]]; then
              echo "Base branch changed from ${{ github.event.changes.base.ref.from }} to ${{ github.event.changes.base.ref.to }}"
              echo "should-run=true" >> $GITHUB_OUTPUT
            else
              echo "Base branch was not changed in this edit"
              echo "should-run=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Not an edit event, running workflow"
            echo "should-run=true" >> $GITHUB_OUTPUT
          fi

  validate-branch:
    needs: check-if-should-run
    if: needs.check-if-should-run.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check branch name
        run: |
          # Get the base and source branch names
          BASE_BRANCH="${{ github.base_ref }}"
          SOURCE_BRANCH="${{ github.head_ref }}"

          echo "BASE_BRANCH: $BASE_BRANCH"
          echo "SOURCE_BRANCH: $SOURCE_BRANCH"
          
          # Only run validation if the base branch is main
          if [[ "$BASE_BRANCH" != "main" ]]; then
            echo "Skipping branch validation - not targeting main branch"
            exit 0
          fi
          
          # Check if the source branch is staging or starts with hotfix/
          if [[ "$SOURCE_BRANCH" != "staging" && ! "$SOURCE_BRANCH" =~ ^hotfix/ ]]; then
            echo "::error::Pull requests to main can only be created from 'staging' or 'hotfix/*' branches. Current branch: $SOURCE_BRANCH"
            exit 1
          fi
          
          echo "Branch validation passed. Source branch: $SOURCE_BRANCH"

  run-tests:
    needs: [check-if-should-run, validate-branch]
    if: needs.check-if-should-run.outputs.should-run == 'true' && (needs.validate-branch.result == 'success' || needs.validate-branch.result == 'skipped')
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version:
          - "3.11"
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    env:
      PYTHONPATH: "."
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}
      JUDGMENT_DEV: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install uv
          uv sync --dev

      - name: Run tests
        run: |
          cd src
          uv run pytest tests

  run-e2e-tests-staging:
    needs: [check-if-should-run, validate-branch]
    if: "needs.check-if-should-run.outputs.should-run == 'true' && github.base_ref == 'staging' && !contains(github.actor, '[bot]') && (needs.validate-branch.result == 'success' || needs.validate-branch.result == 'skipped')"
    name: Staging E2E Tests
    runs-on: ubuntu-latest
    env:
      TEST_TIMEOUT_SECONDS: ${{ secrets.TEST_TIMEOUT_SECONDS }}
    steps:
      - name: Wait for turn
        uses: softprops/turnstyle@v2
        with:
          poll-interval-seconds: 10
          same-branch-only: false
          job-to-wait-for: "Staging E2E Tests"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1
          
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
         
      - name: Install judgeval dependencies
        run: |
          pip install uv
          uv sync --dev

      - name: Check if server is running
        run: |
          if ! curl -s https://staging.api.judgmentlabs.ai/health > /dev/null; then
            echo "Staging Judgment server is not running properly. Check logs on AWS CloudWatch for more details."
            exit 1
          else
            echo "Staging server is running."
          fi
        
      - name: Run E2E tests
        working-directory: src
        run: |      
          SECRET_VARS=$(aws secretsmanager get-secret-value --secret-id gh-actions-stg-judgeval/api-keys/judgeval --query SecretString --output text)
          export $(echo "$SECRET_VARS" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"')
          timeout ${TEST_TIMEOUT_SECONDS}s uv run pytest --durations=0 --cov=. --cov-config=.coveragerc --cov-report=html ./e2etests

      - name: Upload coverage HTML report (staging)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html-staging
          path: src/htmlcov

  run-e2e-tests-main:
    needs: [check-if-should-run, validate-branch]
    if: "needs.check-if-should-run.outputs.should-run == 'true' && github.base_ref == 'main' && !contains(github.actor, '[bot]') && needs.validate-branch.result == 'success'"
    name: Production E2E Tests
    runs-on: ubuntu-latest
    env:
      TEST_TIMEOUT_SECONDS: ${{ secrets.TEST_TIMEOUT_SECONDS }}
    steps:
      - name: Wait for turn
        uses: softprops/turnstyle@v2
        with:
          poll-interval-seconds: 10
          same-branch-only: false
          job-to-wait-for: "Production E2E Tests"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1
          
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
         
      - name: Install judgeval dependencies
        run: |
          pip install uv
          uv sync --dev

      - name: Check if server is running
        run: |
          if ! curl -s https://api.judgmentlabs.ai/health > /dev/null; then
            echo "Production Judgment server is not running properly. Check logs on AWS CloudWatch for more details."
            exit 1
          else
            echo "Production server is running."
          fi
        
      - name: Run E2E tests
        working-directory: src
        run: |      
          SECRET_VARS=$(aws secretsmanager get-secret-value --secret-id gh-actions-judgeval/api-keys/judgeval --query SecretString --output text)
          export $(echo "$SECRET_VARS" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"')
          timeout ${TEST_TIMEOUT_SECONDS}s uv run pytest --durations=0 --cov=. --cov-config=.coveragerc --cov-report=html ./e2etests

      - name: Upload coverage HTML report (production)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html-production
          path: src/htmlcov