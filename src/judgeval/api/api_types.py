# generated by datamodel-codegen:
#   filename:  .openapi.json
#   timestamp: 2025-08-06T01:21:41+00:00

from __future__ import annotations
from typing import Any, Dict, List, Optional, TypedDict, Union
from typing_extensions import NotRequired


class CheckExperimentTypeJudgmentType(TypedDict):
    eval_name: str
    project_name: str
    is_trace: bool


class EvalRunNameCheckJudgmentType(TypedDict):
    eval_name: str
    project_name: str


class EvalResultsFetchJudgmentType(TypedDict):
    eval_name: str
    project_name: str


class DatasetFetchJudgmentType(TypedDict):
    dataset_alias: str
    project_name: str


class DatasetFetchStatsByProjectJudgmentType(TypedDict):
    project_name: str


class TraceSaveJudgmentType(TypedDict):
    project_name: str
    trace_id: str
    name: str
    created_at: str
    duration: float
    offline_mode: NotRequired[bool]
    has_notification: NotRequired[bool]
    customer_id: NotRequired[Optional[str]]
    tags: NotRequired[List[str]]
    metadata: NotRequired[Dict[str, Any]]
    update_id: NotRequired[int]


class TraceFetchJudgmentType(TypedDict):
    trace_id: str


class EvaluationRunsBatchRequestJudgmentType(TypedDict):
    organization_id: str
    evaluation_entries: List[Dict[str, Any]]


class ProjectAddJudgmentType(TypedDict):
    project_name: str


class ProjectAddResponseJudgmentType(TypedDict):
    project_id: str


class ScorerExistsRequestJudgmentType(TypedDict):
    name: str


class ScorerExistsResponseJudgmentType(TypedDict):
    exists: bool


class SavePromptScorerRequestJudgmentType(TypedDict):
    name: str
    prompt: str
    options: NotRequired[Optional[Dict[str, float]]]


class SavePromptScorerResponseJudgmentType(TypedDict):
    message: str
    name: str


class FetchPromptScorerRequestJudgmentType(TypedDict):
    name: str


class ResolveProjectNameRequestJudgmentType(TypedDict):
    project_name: str


class ResolveProjectNameResponseJudgmentType(TypedDict):
    project_id: str


class ValidationErrorJudgmentType(TypedDict):
    loc: List[Union[str, int]]
    msg: str
    type: str


class ExampleJudgmentType(TypedDict):
    example_id: str
    created_at: str
    name: NotRequired[Optional[str]]


class ScorerConfigJudgmentType(TypedDict):
    score_type: str
    name: NotRequired[Optional[str]]
    threshold: NotRequired[float]
    strict_mode: NotRequired[bool]
    required_params: NotRequired[List[str]]
    kwargs: NotRequired[Optional[Dict[str, Any]]]


class SpanBatchItemJudgmentType(TypedDict):
    span_id: str
    trace_id: str
    function: str
    depth: int
    created_at: NotRequired[Any]
    parent_span_id: NotRequired[Optional[str]]
    span_type: NotRequired[Optional[str]]
    inputs: NotRequired[Optional[Dict[str, Any]]]
    output: NotRequired[Any]
    error: NotRequired[Optional[Dict[str, Any]]]
    usage: NotRequired[Optional[Dict[str, Any]]]
    duration: NotRequired[Optional[float]]
    expected_tools: NotRequired[Optional[List[Dict[str, Any]]]]
    additional_metadata: NotRequired[Optional[Dict[str, Any]]]
    has_evaluation: NotRequired[Optional[bool]]
    agent_name: NotRequired[Optional[str]]
    class_name: NotRequired[Optional[str]]
    state_before: NotRequired[Optional[Dict[str, Any]]]
    state_after: NotRequired[Optional[Dict[str, Any]]]
    span_state: str
    update_id: NotRequired[int]
    queued_at: float


class PromptScorerJudgmentType(TypedDict):
    name: str
    prompt: str
    options: NotRequired[Optional[Dict[str, float]]]
    created_at: NotRequired[Optional[str]]
    updated_at: NotRequired[Optional[str]]


class ScorerDataJudgmentType(TypedDict):
    name: str
    threshold: float
    success: bool
    score: NotRequired[Optional[float]]
    reason: NotRequired[Optional[str]]
    strict_mode: NotRequired[Optional[bool]]
    evaluation_model: NotRequired[Union[List[str], str]]
    error: NotRequired[Optional[str]]
    additional_metadata: NotRequired[Optional[Dict[str, Any]]]


class TraceUsageJudgmentType(TypedDict):
    prompt_tokens: NotRequired[Optional[int]]
    completion_tokens: NotRequired[Optional[int]]
    cache_creation_input_tokens: NotRequired[Optional[int]]
    cache_read_input_tokens: NotRequired[Optional[int]]
    total_tokens: NotRequired[Optional[int]]
    prompt_tokens_cost_usd: NotRequired[Optional[float]]
    completion_tokens_cost_usd: NotRequired[Optional[float]]
    total_cost_usd: NotRequired[Optional[float]]
    model_name: NotRequired[Optional[str]]


class ToolJudgmentType(TypedDict):
    tool_name: str
    parameters: NotRequired[Optional[Dict[str, Any]]]
    agent_name: NotRequired[Optional[str]]
    result_dependencies: NotRequired[Optional[List[Dict[str, Any]]]]
    action_dependencies: NotRequired[Optional[List[Dict[str, Any]]]]
    require_all: NotRequired[Optional[bool]]


class HTTPValidationErrorJudgmentType(TypedDict):
    detail: NotRequired[List[ValidationErrorJudgmentType]]


class JudgmentEvalJudgmentType(TypedDict):
    project_name: NotRequired[Optional[str]]
    eval_name: NotRequired[Optional[str]]
    examples: List[ExampleJudgmentType]
    scorers: List[ScorerConfigJudgmentType]
    model: str
    append: NotRequired[Optional[bool]]
    override: NotRequired[Optional[bool]]
    trace_span_id: NotRequired[Optional[str]]
    trace_id: NotRequired[Optional[str]]


class DatasetInsertExamplesJudgmentType(TypedDict):
    dataset_alias: str
    examples: List[ExampleJudgmentType]
    project_name: str


class SpansBatchRequestJudgmentType(TypedDict):
    spans: List[SpanBatchItemJudgmentType]
    organization_id: str


class FetchPromptScorerResponseJudgmentType(TypedDict):
    scorer: PromptScorerJudgmentType


class TraceSpanJudgmentType(TypedDict):
    span_id: str
    trace_id: str
    function: str
    depth: int
    created_at: NotRequired[Any]
    parent_span_id: NotRequired[Optional[str]]
    span_type: NotRequired[Optional[str]]
    inputs: NotRequired[Optional[Dict[str, Any]]]
    error: NotRequired[Optional[Dict[str, Any]]]
    output: NotRequired[Any]
    usage: NotRequired[Optional[TraceUsageJudgmentType]]
    duration: NotRequired[Optional[float]]
    expected_tools: NotRequired[Optional[List[ToolJudgmentType]]]
    additional_metadata: NotRequired[Optional[Dict[str, Any]]]
    has_evaluation: NotRequired[Optional[bool]]
    agent_name: NotRequired[Optional[str]]
    class_name: NotRequired[Optional[str]]
    state_before: NotRequired[Optional[Dict[str, Any]]]
    state_after: NotRequired[Optional[Dict[str, Any]]]
    update_id: NotRequired[int]


class TraceJudgmentType(TypedDict):
    trace_id: str
    name: str
    created_at: str
    duration: float
    trace_spans: List[TraceSpanJudgmentType]
    offline_mode: NotRequired[bool]
    rules: NotRequired[Dict[str, Any]]
    has_notification: NotRequired[bool]
    customer_id: NotRequired[Optional[str]]
    tags: NotRequired[List[str]]
    metadata: NotRequired[Dict[str, Any]]
    update_id: NotRequired[int]


class ScoringResultJudgmentType(TypedDict):
    success: bool
    scorers_data: Optional[List[ScorerDataJudgmentType]]
    name: NotRequired[Optional[str]]
    data_object: NotRequired[
        Optional[Union[TraceSpanJudgmentType, ExampleJudgmentType]]
    ]
    trace_id: NotRequired[Optional[str]]
    run_duration: NotRequired[Optional[float]]
    evaluation_cost: NotRequired[Optional[float]]


class TraceRunJudgmentType(TypedDict):
    project_name: NotRequired[Optional[str]]
    eval_name: NotRequired[Optional[str]]
    traces: List[TraceJudgmentType]
    scorers: List[ScorerConfigJudgmentType]
    model: str
    append: NotRequired[Optional[bool]]
    override: NotRequired[Optional[bool]]
    trace_span_id: NotRequired[Optional[str]]
    tools: NotRequired[Optional[List[Dict[str, Any]]]]


class EvalResultsJudgmentType(TypedDict):
    results: List[ScoringResultJudgmentType]
    run: Union[TraceRunJudgmentType, JudgmentEvalJudgmentType]


class DatasetPushJudgmentType(TypedDict):
    dataset_alias: str
    comments: NotRequired[Optional[str]]
    source_file: NotRequired[Optional[str]]
    examples: NotRequired[Optional[List[ExampleJudgmentType]]]
    traces: NotRequired[Optional[List[TraceJudgmentType]]]
    is_trace: NotRequired[bool]
    project_name: str
    overwrite: NotRequired[Optional[bool]]
